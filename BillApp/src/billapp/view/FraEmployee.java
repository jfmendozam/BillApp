package billapp.view;

import billapp.logic.Employee;
import billapp.persistence.DB;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * Show Employee frame
 * @author jf
 */
public class FraEmployee extends javax.swing.JFrame {
    private DB dataFile;
    private ImageIcon iconNoPhoto;

    /**
     * Creates new form FraEmployee
     */
    public FraEmployee() {
        initComponents();
//        labPhotoFilename.setVisible(false);
//        this.iconNoPhoto = (ImageIcon)labPhoto.getIcon();
//
//        this.dataFile = new DB();
//        this.selectEmployee();
    }

    public FraEmployee(DB dataFile) {
        initComponents();
        labPhotoFilename.setVisible(false);
        this.iconNoPhoto = (ImageIcon)labPhoto.getIcon();
        this.setLocationRelativeTo(null);

        this.dataFile = dataFile;
        this.selectEmployee();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpGender = new javax.swing.ButtonGroup();
        panPersonalData = new javax.swing.JPanel();
        labFirstname = new javax.swing.JLabel();
        labLastname = new javax.swing.JLabel();
        labGender = new javax.swing.JLabel();
        labBornDate = new javax.swing.JLabel();
        labHiredDate = new javax.swing.JLabel();
        labSalary = new javax.swing.JLabel();
        txtFirstname = new javax.swing.JTextField();
        txtLastname = new javax.swing.JTextField();
        radFemale = new javax.swing.JRadioButton();
        radMale = new javax.swing.JRadioButton();
        datBorn = new com.toedter.calendar.JDateChooser();
        datHired = new com.toedter.calendar.JDateChooser();
        txtSalary = new javax.swing.JTextField();
        labPhoto = new javax.swing.JLabel();
        labId = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        labPhotoFilename = new javax.swing.JLabel();
        butPhoto = new javax.swing.JButton();
        panCalculations = new javax.swing.JPanel();
        labAge = new javax.swing.JLabel();
        labOld = new javax.swing.JLabel();
        labBenefits = new javax.swing.JLabel();
        panButtons = new javax.swing.JPanel();
        butNew = new javax.swing.JButton();
        butFirst = new javax.swing.JButton();
        butPrevious = new javax.swing.JButton();
        butNext = new javax.swing.JButton();
        butLast = new javax.swing.JButton();
        butSearch = new javax.swing.JButton();
        butUpdate = new javax.swing.JButton();
        butDelete = new javax.swing.JButton();

        setTitle("USTA Employee System");

        panPersonalData.setBorder(javax.swing.BorderFactory.createTitledBorder("Personal Data"));

        labFirstname.setText("Firstname");

        labLastname.setText("Lastname");

        labGender.setText("Gender");

        labBornDate.setText("Born date");

        labHiredDate.setText("Hired date");

        labSalary.setText("Salary");

        grpGender.add(radFemale);
        radFemale.setSelected(true);
        radFemale.setText("Female");

        grpGender.add(radMale);
        radMale.setText("Male");

        txtSalary.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        labPhoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labPhoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/billapp/view/noImage.jpg"))); // NOI18N

        labId.setText("id");

        butPhoto.setText("Load photo");
        butPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPhotoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panPersonalDataLayout = new javax.swing.GroupLayout(panPersonalData);
        panPersonalData.setLayout(panPersonalDataLayout);
        panPersonalDataLayout.setHorizontalGroup(
            panPersonalDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panPersonalDataLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panPersonalDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panPersonalDataLayout.createSequentialGroup()
                        .addComponent(labId, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtId))
                    .addGroup(panPersonalDataLayout.createSequentialGroup()
                        .addComponent(labFirstname)
                        .addGap(18, 18, 18)
                        .addComponent(txtFirstname, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panPersonalDataLayout.createSequentialGroup()
                        .addComponent(labBornDate)
                        .addGap(18, 18, 18)
                        .addComponent(datBorn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panPersonalDataLayout.createSequentialGroup()
                        .addGroup(panPersonalDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labLastname)
                            .addComponent(labGender))
                        .addGap(18, 18, 18)
                        .addGroup(panPersonalDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panPersonalDataLayout.createSequentialGroup()
                                .addComponent(radFemale)
                                .addGap(18, 18, 18)
                                .addComponent(radMale)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtLastname)))
                    .addGroup(panPersonalDataLayout.createSequentialGroup()
                        .addGroup(panPersonalDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labHiredDate)
                            .addComponent(labSalary))
                        .addGap(18, 18, 18)
                        .addGroup(panPersonalDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(datHired, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panPersonalDataLayout.createSequentialGroup()
                                .addComponent(txtSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGroup(panPersonalDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panPersonalDataLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(panPersonalDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labPhoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labPhotoFilename, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panPersonalDataLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                        .addComponent(butPhoto)
                        .addGap(50, 50, 50))))
        );
        panPersonalDataLayout.setVerticalGroup(
            panPersonalDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panPersonalDataLayout.createSequentialGroup()
                .addGroup(panPersonalDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panPersonalDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labId)
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(labPhotoFilename, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panPersonalDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panPersonalDataLayout.createSequentialGroup()
                        .addGroup(panPersonalDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(datBorn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panPersonalDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(panPersonalDataLayout.createSequentialGroup()
                                    .addGroup(panPersonalDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(labFirstname)
                                        .addComponent(txtFirstname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(panPersonalDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(labLastname)
                                        .addComponent(txtLastname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(panPersonalDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(labGender)
                                        .addComponent(radFemale)
                                        .addComponent(radMale))
                                    .addGap(18, 18, 18)
                                    .addComponent(labBornDate))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panPersonalDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labHiredDate)
                            .addComponent(butPhoto, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(datHired, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panPersonalDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        panCalculations.setBorder(javax.swing.BorderFactory.createTitledBorder("Calculations"));

        labAge.setText("Age: ");

        labOld.setText("Old: ");

        labBenefits.setText("Benefits: ");

        javax.swing.GroupLayout panCalculationsLayout = new javax.swing.GroupLayout(panCalculations);
        panCalculations.setLayout(panCalculationsLayout);
        panCalculationsLayout.setHorizontalGroup(
            panCalculationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCalculationsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labAge, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labOld, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labBenefits, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panCalculationsLayout.setVerticalGroup(
            panCalculationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCalculationsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panCalculationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(labOld, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .addComponent(labAge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labBenefits, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panButtons.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        butNew.setText("New");
        butNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butNewActionPerformed(evt);
            }
        });

        butFirst.setText("|<");
        butFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butFirstActionPerformed(evt);
            }
        });

        butPrevious.setText("<");
        butPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPreviousActionPerformed(evt);
            }
        });

        butNext.setText(">");
        butNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butNextActionPerformed(evt);
            }
        });

        butLast.setText(">|");
        butLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butLastActionPerformed(evt);
            }
        });

        butSearch.setText("Search...");
        butSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSearchActionPerformed(evt);
            }
        });

        butUpdate.setText("Update");
        butUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butUpdateActionPerformed(evt);
            }
        });

        butDelete.setText("Delete");
        butDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panButtonsLayout = new javax.swing.GroupLayout(panButtons);
        panButtons.setLayout(panButtonsLayout);
        panButtonsLayout.setHorizontalGroup(
            panButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(butFirst)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butPrevious)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butNext)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butLast)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butSearch)
                .addGap(69, 69, 69)
                .addComponent(butNew)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butDelete)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panButtonsLayout.setVerticalGroup(
            panButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panButtonsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butNew)
                    .addComponent(butFirst)
                    .addComponent(butPrevious)
                    .addComponent(butNext)
                    .addComponent(butLast)
                    .addComponent(butSearch)
                    .addComponent(butUpdate)
                    .addComponent(butDelete))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(panCalculations, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 552, Short.MAX_VALUE)
                            .addComponent(panPersonalData, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(panButtons, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panPersonalData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panCalculations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * New or save employee record
     * @param evt Event
     */
    private void butNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNewActionPerformed
        if (butNew.getText().equals("New")) {
            this.newView();
        }
        else {
            if (butNew.getText().equals("Save")) {
                if (this.validateView()) {
                    this.insertEmployee();

                    butNew.setText("New");
                    butFirst.setEnabled(true);
                    butPrevious.setEnabled(true);
                    butNext.setEnabled(true);
                    butLast.setEnabled(true);
                    butSearch.setEnabled(true);
                    butUpdate.setEnabled(true);
                    butDelete.setEnabled(true);
                }
                else {
                    JOptionPane.showMessageDialog(this, "Please, fill the requeried fields", 
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_butNewActionPerformed

    /**
     * Update employee record
     * @param evt Event
     */
    private void butUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butUpdateActionPerformed
        this.updateEmployee();
        JOptionPane.showMessageDialog(this, "Updated record!", "Update record",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_butUpdateActionPerformed

    /**
     * Delete employee record
     * @param evt Event
     */
    private void butDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, 
                "Are you sure to delete this record?", "Delete record", 
                JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {

            this.deleteEmployee();
            JOptionPane.showMessageDialog(this, "Deleted record!", "Delete record",
                JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_butDeleteActionPerformed

    /**
     * Show first record
     * @param evt Event
     */
    private void butFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butFirstActionPerformed
        try {
            this.getDataFile().getResultSet().first();
            this.updateView();
        } catch (SQLException ex) {
            Logger.getLogger(FraEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_butFirstActionPerformed

    /**
     * Show previous record
     * @param evt Event
     */
    private void butPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPreviousActionPerformed
        try {
            if (!this.getDataFile().getResultSet().isFirst()) {
                this.getDataFile().getResultSet().previous();
                this.updateView();
            }
        } catch (SQLException ex) {
            Logger.getLogger(FraEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_butPreviousActionPerformed

    /**
     * Show next record
     * @param evt Event
     */
    private void butNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNextActionPerformed
        try {
            if (!this.getDataFile().getResultSet().isLast()) {
                this.getDataFile().getResultSet().next();
                this.updateView();
            }
        } catch (SQLException ex) {
            Logger.getLogger(FraEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_butNextActionPerformed

    /**
     * Show last record
     * @param evt Event
     */
    private void butLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLastActionPerformed
        try {
            this.getDataFile().getResultSet().last();
            this.updateView();
        } catch (SQLException ex) {
            Logger.getLogger(FraEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_butLastActionPerformed

    /**
     * Search an employee
     * @param evt Event
     */
    private void butSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSearchActionPerformed
        long id = Long.parseLong(JOptionPane.showInputDialog(
                "Please, write the employee id", "Employee id"));
        if (id > 0) {
            this.searchEmployee(id);
        }
    }//GEN-LAST:event_butSearchActionPerformed

    /**
     * Load a employee photo
     * @param evt Event
     */
    private void butPhotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPhotoActionPerformed
        JFileChooser fc = new JFileChooser();
        int select = fc.showOpenDialog(this);
        if (select == JFileChooser.APPROVE_OPTION) {
            try {
                File photoFile = fc.getSelectedFile();
                labPhotoFilename.setText(photoFile.getCanonicalPath());
                ImageIcon iconPhoto = new ImageIcon(labPhotoFilename.getText());
                labPhoto.setIcon(iconPhoto);
            } catch (IOException ex) {
                Logger.getLogger(FraEmployee.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_butPhotoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FraEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new FraEmployee().setVisible(true);
        });
    }

    /**
     * Get data file
     * @return data file
     */
    public DB getDataFile() {
        return this.dataFile;
    }

    /**
     * Set data file
     * @param dataFile data file
     */
    public void setDataFile(DB dataFile) {
        this.dataFile = dataFile;
    }

    /**
     * Get Image Icon
     * @return Image Icon
     */
    public ImageIcon getIconNoPhoto() {
        return this.iconNoPhoto;
    }

    /**
     * Set Image Icon
     * @param iconNoPhoto Image Icon
     */
    public void setIconNoPhoto(ImageIcon iconNoPhoto) {
        this.iconNoPhoto = iconNoPhoto;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butDelete;
    private javax.swing.JButton butFirst;
    private javax.swing.JButton butLast;
    private javax.swing.JButton butNew;
    private javax.swing.JButton butNext;
    private javax.swing.JButton butPhoto;
    private javax.swing.JButton butPrevious;
    private javax.swing.JButton butSearch;
    private javax.swing.JButton butUpdate;
    private com.toedter.calendar.JDateChooser datBorn;
    private com.toedter.calendar.JDateChooser datHired;
    private javax.swing.ButtonGroup grpGender;
    private javax.swing.JLabel labAge;
    private javax.swing.JLabel labBenefits;
    private javax.swing.JLabel labBornDate;
    private javax.swing.JLabel labFirstname;
    private javax.swing.JLabel labGender;
    private javax.swing.JLabel labHiredDate;
    private javax.swing.JLabel labId;
    private javax.swing.JLabel labLastname;
    private javax.swing.JLabel labOld;
    private javax.swing.JLabel labPhoto;
    private javax.swing.JLabel labPhotoFilename;
    private javax.swing.JLabel labSalary;
    private javax.swing.JPanel panButtons;
    private javax.swing.JPanel panCalculations;
    private javax.swing.JPanel panPersonalData;
    private javax.swing.JRadioButton radFemale;
    private javax.swing.JRadioButton radMale;
    private javax.swing.JTextField txtFirstname;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtLastname;
    private javax.swing.JTextField txtSalary;
    // End of variables declaration//GEN-END:variables

    /**
     * Validate the view for save
     * @return True is ok
     */
    private boolean validateView() {
        boolean validate = !(txtId.getText().equals("")
                || txtFirstname.getText().equals("") 
                || txtLastname.getText().equals("")
                || (datBorn.getDate() == null)
                || (datHired.getDate() == null)
                || txtSalary.getText().equals(""));
        return validate;
    }

    /**
     * Obtain the view data and tranfer it to the object
     */
    private Employee view2Object() {
        Employee employee = new Employee();

        employee.setId(Long.parseLong(txtId.getText()));
        employee.setFirstname(txtFirstname.getText());
        employee.setLastname(txtLastname.getText());
        employee.setPhoto(labPhotoFilename.getText());
        employee.setGender(radFemale.isSelected() ? 0 : 1);
        employee.setBornDate(datBorn.getDate());
        employee.setHiredDate(datHired.getDate());
        employee.setSalary(Integer.parseInt(txtSalary.getText()));
        
        return employee;
    }

    /**
     * You obtain data from an object and pass it to the view
     */
    private void updateView() {
        if (this.getDataFile().getResultSet() == null) {
            this.newView();
        }
        else {
            this.object2View();
        }
    }

    /**
     * You prepare the view to enter a new employee data
     */
    private void newView() {
        txtId.setText("");
        txtFirstname.setText("");
        txtLastname.setText("");
        labPhotoFilename.setText("");
        labPhoto.setIcon(this.getIconNoPhoto());
        radFemale.setSelected(true);
        datBorn.setDate(new Date(90, 0, 1));
        datHired.setDate(new Date(108, 6, 15));
        txtSalary.setText("");
        
        labAge.setText("Age: ");
        labOld.setText("Old: ");
        labBenefits.setText("Benefits: ");
        
        butNew.setText("Save");
        butFirst.setEnabled(false);
        butPrevious.setEnabled(false);
        butNext.setEnabled(false);
        butLast.setEnabled(false);
        butSearch.setEnabled(false);
        butUpdate.setEnabled(false);
        butDelete.setEnabled(false);
    }

    /**
     * Result set -> object
     */
    private void object2View() {
        Employee employee = new Employee();
        try {
            employee.setId(this.getDataFile().getResultSet().getLong("id"));
            employee.setFirstname(this.getDataFile().getResultSet().getString("firstname"));
            employee.setLastname(this.getDataFile().getResultSet().getString("lastname"));
            employee.setPhoto(
                    (this.getDataFile().getResultSet().getString("photo") == null) 
                            ? "" : this.getDataFile().getResultSet().getString("photo"));
            employee.setGender(this.getDataFile().getResultSet().getInt("gender"));
            employee.setBornDate(this.getDataFile().getResultSet().getDate("bornDate"));
            employee.setHiredDate(this.getDataFile().getResultSet().getDate("hiredDate"));
            employee.setSalary(this.getDataFile().getResultSet().getInt("salary"));

            this.object2View(employee);
        } catch (SQLException ex) {
            Logger.getLogger(FraEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Show the object data into view
     * @param employee Employee to show
     */
    private void object2View(Employee employee) {
        txtId.setText("" + employee.getId());
        txtFirstname.setText(employee.getFirstname());
        txtLastname.setText(employee.getLastname());

        if (employee.getPhoto().equals("")) {
            labPhotoFilename.setText("");
            labPhoto.setIcon(this.getIconNoPhoto());
        }
        else {
            labPhotoFilename.setText(employee.getPhoto());
            ImageIcon iconPhoto = new ImageIcon(labPhotoFilename.getText());
            labPhoto.setIcon(iconPhoto);
        }
        
        radFemale.setSelected(employee.getGender() == 0);
        datBorn.setDate(employee.getBornDate());
        datHired.setDate(employee.getHiredDate());
        txtSalary.setText("" + employee.getSalary());

        labAge.setText("Age: " + employee.getAge() + " years");
        labOld.setText("Old: " + employee.getOld() + " years");
        NumberFormat nf = NumberFormat.getCurrencyInstance(Locale.getDefault());
        labBenefits.setText("Benefits: " + nf.format(employee.getBenefits()));       
    }

    /**
     * Select employees from DB
     */
    private void selectEmployee() {
        String query = "SELECT * FROM Employee";
        if (this.getDataFile().execute(query)) {
            try {
                this.getDataFile().getResultSet().next();
                this.updateView();
            } catch (SQLException ex) {
                Logger.getLogger(FraEmployee.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * Insert new employee
     */
    private void insertEmployee() {
        Employee employee = this.view2Object();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        String query = "INSERT INTO Employee "
                + "(id, firstname, lastname, photo, gender, bornDate, hiredDate, salary) "
                + "VALUES ("
                + employee.getId() + ", '"
                + employee.getFirstname() + "', '"
                + employee.getLastname() + "', '"
                + employee.getPhoto() + "', "
                + employee.getGender() + ", #"
                + dateFormat.format(employee.getBornDate()) + "#, #"
                + dateFormat.format(employee.getHiredDate()) + "#, "
                + employee.getSalary() + ")";
        if (this.getDataFile().execute(query)) {
            this.selectEmployee();
            this.searchEmployee(employee.getId());
        }
    }

    /**
     * Update employee
     */
    private void updateEmployee() {
        Employee employee = this.view2Object();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        String query = "UPDATE Employee SET "
                + "firstname = '" + employee.getFirstname() + "', "
                + "lastname = '" + employee.getLastname() + "', "
                + "photo = '" + employee.getPhoto() + "', "
                + "gender = " + employee.getGender() + ", "
                + "bornDate = #" + dateFormat.format(employee.getBornDate()) + "#, "
                + "hiredDate = #" + dateFormat.format(employee.getHiredDate()) + "#, "
                + "salary = " + employee.getSalary() + " "
                + "WHERE id = " + employee.getId();
        if (this.getDataFile().execute(query)) {
            this.selectEmployee();
            this.searchEmployee(employee.getId());
        }
    }

    /**
     * Delete employee
     */
    private void deleteEmployee() {
        Employee employee = this.view2Object();
        String query = "DELETE * FROM Employee WHERE id = " + employee.getId();
        if (this.getDataFile().execute(query)) {
            this.selectEmployee();
        }        
    }

    /**
     * Search employee by id
     * @param id Employee id
     */
    private void searchEmployee(long id) {
        boolean find = false;
        try {
            if (this.getDataFile().getResultSet() != null) {
                Long lastId = this.getDataFile().getResultSet().getLong("id");
                this.getDataFile().getResultSet().beforeFirst();
                while (this.getDataFile().getResultSet().next()) {
                    if (this.getDataFile().getResultSet().getLong("id") == id) {
                        find = true;
                        break;
                    }
                }
                if (find) {
                    this.updateView();
                }
                else {
                    this.getDataFile().getResultSet().first();
                    this.searchEmployee(lastId);
                    JOptionPane.showMessageDialog(this, "Employee " + id + " was not found!");
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(FraEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
